package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import model.Role;
import model.User;

public class UserDaoImpl implements UserDao {
	private static final String DB_URL = "jdbc:mysql://localhost:3306/login_and_register";
	private static final String DB_USERNAME = "root";
	private static final String DB_PASSWORD = "mysqlpassword";
	private static final String SELECT_USER_AND_CHECK_IF_EXISTS_QUERY = "SELECT * FROM users WHERE email =?";
	private static final String SELECT_USER_QUERY = "SELECT * from users WHERE email=? AND password =?";
	private static final String INSERT_USER_QUERY = "INSERT INTO users (full_name, date_of_birth, email, password) VALUES (?,?,?,?)";
	private static final String UPDATE_USER_PASSWORD_QUERY = "UPDATE users SET password = ? WHERE email = ?";
	private static final String SELECT_ALL_USERS_QUERY = "SELECT * FROM users";
	Logger logger = LogManager.getLogger("UserDaoImpl");

	private LocalDateTime toLocalDateTime(String dateTime) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
		return LocalDateTime.parse(dateTime, formatter);
	}

	private Connection getConnection() {
		Connection connection = null;
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return connection;
	}

	public boolean checkIfUserExists(String email) {
		boolean result = false;
		try (Connection con = getConnection();
				PreparedStatement selectStatement = con.prepareStatement(SELECT_USER_AND_CHECK_IF_EXISTS_QUERY);) {
			selectStatement.setString(1, email);
			ResultSet rs = selectStatement.executeQuery();
			if (rs.next() == false) {
				result = false;
			} else {
				result = true;
			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		return result;

	}

	@Override
	public User getUser(String email, String password) {

		User user = null;
		try (Connection con = getConnection();
				PreparedStatement selectStatement = con.prepareStatement(SELECT_USER_QUERY);) {

			selectStatement.setString(1, email);
			selectStatement.setString(2, password);
			ResultSet rs = selectStatement.executeQuery();
			// boolean execute(): may be any kind of SQL statement.
			// ResultSet executeQuery(): returns the ResultSet object generated by the
			// query.
			// int executeUpdate(): must be an SQL INSERT, UPDATE or DELETE statement; or an
			// SQL statement that returns nothing, such as a DDL statement.
			while (rs.next()) {
				Role roleFromQuery = Role.valueOf(rs.getString("role"));
				String fullNameFromQuery = rs.getString("full_name");
				LocalDate dateOfBirthdayFromQuery = LocalDate.parse(rs.getString("date_of_birth"));
				String emailFromQuery = rs.getString("email");
				String passwordFromQuery = rs.getString("password");
				LocalDateTime createdAtFromQuery = toLocalDateTime(rs.getString("created_at"));
				LocalDateTime updatedAtFromQuery = toLocalDateTime(rs.getString("updated_at"));
				user = new User(roleFromQuery,fullNameFromQuery, dateOfBirthdayFromQuery, emailFromQuery, passwordFromQuery,
						createdAtFromQuery, updatedAtFromQuery);

			}

		} catch (SQLException e) {

			e.printStackTrace();
		}
		return user;
	}

	@Override
	public void addUser(User user) {
		String emailToCheck = user.getEmail();

		try (Connection con = getConnection();
				PreparedStatement insertStatement = con.prepareStatement(INSERT_USER_QUERY);) {

			insertStatement.setString(1, user.getFullName());
			insertStatement.setDate(2, java.sql.Date.valueOf(user.getBirthday()));
			insertStatement.setString(3, user.getEmail());
			insertStatement.setString(4, user.getPassword());
			insertStatement.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	@Override
	public void changePassword(String email, String newPassword) {
		try (Connection con = getConnection();
				PreparedStatement updateStatement = con.prepareStatement(UPDATE_USER_PASSWORD_QUERY);) {
			updateStatement.setString(1, newPassword);
			updateStatement.setString(2, email);
			int result = updateStatement.executeUpdate();
			logger.info(result);
			logger.info(email + " " + newPassword);
		} catch (SQLException e) {

			e.printStackTrace();
		}
	}

	@Override
	public List<User> getAllUsers() {
		List<User> userList = new ArrayList<>();
		try (Connection conn = getConnection(); Statement selectStatement = conn.createStatement();) {
			ResultSet rs = selectStatement.executeQuery(SELECT_ALL_USERS_QUERY);

			while (rs.next()) {
				Integer idFromQquery = Integer.valueOf(rs.getString("id"));
				Role roleFromQuery = Role.valueOf(rs.getString("role"));
				String fullNameFromQuery = rs.getString("full_name");
				LocalDate dateOfBirthdayFromQuery = LocalDate.parse(rs.getString("date_of_birth"));
				String emailFromQuery = rs.getString("email");
				String passwordFromQuery = rs.getString("password");
				LocalDateTime createdAtFromQuery = toLocalDateTime(rs.getString("created_at"));
				LocalDateTime updatedAtFromQuery = toLocalDateTime(rs.getString("updated_at"));
				User user = new User(idFromQquery, roleFromQuery, fullNameFromQuery, dateOfBirthdayFromQuery,
						emailFromQuery, passwordFromQuery, createdAtFromQuery, updatedAtFromQuery);
				userList.add(user);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return userList;
	}

}
